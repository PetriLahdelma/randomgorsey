{"version":3,"file":"static/js/220.94221f1e.chunk.js","mappings":"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","sources":["webpack://randomgorsey/./src/pages/Contact.module.css?00cb","webpack://randomgorsey/./src/components/Label.module.css?c910","components/Label.tsx","webpack://randomgorsey/./src/components/Input.module.css?9ef7","components/Input.tsx","webpack://randomgorsey/./src/components/TextArea.module.css?9576","components/TextArea.tsx","utils/validation.ts","pages/Contact.tsx","utils/isWebMSupported.ts","components/PageMeta.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"contact-container\":\"Contact_contact-container__eAdla\",\"contact-input\":\"Contact_contact-input__B2A5t\",\"message-row\":\"Contact_message-row__+JhiE\",\"contact-textarea\":\"Contact_contact-textarea__-ilic\",\"contact-button\":\"Contact_contact-button__0MiH-\",\"modal\":\"Contact_modal__VqMjP\",\"modal-close-button\":\"Contact_modal-close-button__SEQs3\",\"contact-row\":\"Contact_contact-row__a5Kp9\",\"subject-row\":\"Contact_subject-row__nIqEj\"};","// extracted by mini-css-extract-plugin\nexport default {\"label\":\"Label_label__Sp-xy\",\"required\":\"Label_required__J1oII\"};","import React from 'react';\nimport styles from './Label.module.css';\n\nexport type LabelProps = {\n  children: React.ReactNode;\n  htmlFor?: string;\n  className?: string;\n  required?: boolean;\n  style?: React.CSSProperties;\n};\n\nconst Label: React.FC<LabelProps> = ({ children, htmlFor, className, required, style }) => (\n  <label htmlFor={htmlFor} className={`${styles.label}${className ? ' ' + className : ''}`} style={style}>\n    {children}\n    {required && <span className={styles.required}>*</span>}\n  </label>\n);\n\nexport default Label;\n","// extracted by mini-css-extract-plugin\nexport default {\"input-container\":\"Input_input-container__lmetV\",\"label\":\"Input_label__XvWTY\",\"input\":\"Input_input__Ba4RU\"};","import React from 'react';\nimport { ExclamationCircleIcon } from '@heroicons/react/24/solid';\nimport Label from './Label';\nimport styles from './Input.module.css';\n\ntype InputProps = {\n  type: 'text' | 'email' | 'password' | 'textarea';\n  value: string;\n  onChange: (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void;\n  onBlur?: (e: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>) => void;\n  placeholder?: string;\n  label?: string;\n  className?: string;\n  error?: string;\n  id?: string;\n};\n\nconst Input: React.FC<InputProps> = ({ type, value, onChange, onBlur, placeholder, label, className, error, id }) => {\n  const inputId = id || (label ? label.replace(/\\s+/g, '-').toLowerCase() : undefined);\n  const inputElement =\n    type === 'textarea' ? (\n      <textarea\n        id={inputId}\n        value={value}\n        onChange={onChange}\n        onBlur={onBlur}\n        placeholder={placeholder}\n        className={`${styles.input} ${className}`}\n      ></textarea>\n    ) : (\n      <input\n        id={inputId}\n        type={type}\n        value={value}\n        onChange={onChange}\n        onBlur={onBlur}\n        placeholder={placeholder}\n        className={`${styles.input} ${className}`}\n      />\n    );\n\n  return (\n    <div style={{ marginBottom: error ? '1.5rem' : '1rem' }} className={styles.inputContainer}>\n      {label && <Label className={styles.label} style={{ color: '#00f' }} htmlFor={inputId}>{label}</Label>}\n      {inputElement}\n      {error && (\n        <div className={styles['input-error']}>\n          <ExclamationCircleIcon\n            style={{\n              width: 18,\n              height: 18,\n              color: '#ff4d4f',\n              marginRight: 6,\n              verticalAlign: 'middle',\n              display: 'inline-block',\n            }}\n          />\n          <span role=\"alert\" style={{ color: 'red', fontSize: '0.8em' }}>\n            {error}\n          </span>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Input;\n","// extracted by mini-css-extract-plugin\nexport default {\"text-area-container\":\"TextArea_text-area-container__LNj0a\",\"label\":\"TextArea_label__KLilg\",\"text-area\":\"TextArea_text-area__8UCDO\"};","import React from 'react';\nimport { ExclamationCircleIcon } from '@heroicons/react/24/solid';\nimport styles from './TextArea.module.css';\n\ntype TextAreaProps = {\n  value: string;\n  onChange: (e: React.ChangeEvent<HTMLTextAreaElement>) => void;\n  placeholder?: string;\n  label?: string;\n  className?: string;\n  rows?: number;\n  cols?: number;\n  error?: string;\n  id?: string;\n};\n\nconst TextArea: React.FC<TextAreaProps> = ({ value, onChange, placeholder, label, className, rows, cols, error, id }) => {\n  const textAreaId = id || (label ? label.replace(/\\s+/g, '-').toLowerCase() : undefined);\n  return (\n    <div style={{ marginBottom: error ? '1.5rem' : '1rem' }} className={styles['text-area-container']}>\n      {label && <label className={styles.label} htmlFor={textAreaId}>{label}</label>}\n      <textarea\n        id={textAreaId}\n        value={value}\n        onChange={onChange}\n        placeholder={placeholder}\n        className={`${styles['text-area']} ${className}`}\n        rows={rows}\n        cols={cols}\n      ></textarea>\n      {error && (\n        <div className={styles['input-error']}>\n          <ExclamationCircleIcon style={{ width: 18, height: 18, color: '#ff4d4f', marginRight: 6, verticalAlign: 'middle', display: 'inline-block' }} />\n          <span role=\"alert\" style={{ color: 'red', fontSize: '0.8em' }}>\n            {error}\n          </span>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TextArea;\n","import { z } from 'zod';\n\n// Example: Contact form validation schema\nexport const contactFormSchema = z.object({\n  name: z.string().min(1, 'Name is required'),\n  email: z.string().email('Invalid email address'),\n  subject: z.string().optional(),\n  message: z.string().min(1, 'Message is required'),\n});\n\n// Usage:\n// contactFormSchema.parse({ name, email, subject, message });\n// If invalid, throws a ZodError\n","import React, { useState } from 'react';\nimport { motion } from 'framer-motion';\nimport styles from './Contact.module.css'; // Import the CSS module for styling\nimport ContactButton from '../components/Button';\nimport emailjs from '@emailjs/browser';\nimport Input from '../components/Input';\nimport TextArea from '../components/TextArea';\nimport { PaperAirplaneIcon } from '@heroicons/react/24/solid';\nimport Spinner from '../components/Spinner';\nimport { contactFormSchema } from '../utils/validation';\nimport Button from '../components/Button';\nimport PageMeta from '../components/PageMeta';\nimport { isWebMSupported } from '../utils/isWebMSupported';\n\nconst Contact: React.FC = () => {\n  const [message, setMessage] = useState('');\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [subject, setSubject] = useState('');\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [loading, setLoading] = React.useState(true);\n  const [sending, setSending] = useState(false);\n  const [formErrors, setFormErrors] = useState<{ name?: string; email?: string; subject?: string; message?: string }>({});\n\n  React.useEffect(() => {\n    const timer = setTimeout(() => setLoading(false), 1000);\n    return () => clearTimeout(timer);\n  }, []);\n\n  const handleSend = () => {\n    // Validate with zod\n    const result = contactFormSchema.safeParse({ name, email, subject, message });\n    if (!result.success) {\n      // Map zod errors to formErrors\n      const errors: { name?: string; email?: string; subject?: string; message?: string } = {};\n      result.error.errors.forEach((err) => {\n        if (err.path[0]) errors[err.path[0] as keyof typeof errors] = err.message;\n      });\n      setFormErrors(errors);\n      return;\n    }\n    setFormErrors({});\n    const honeypotField = document.querySelector('input[name=honeypot]') as HTMLInputElement;\n    if (honeypotField && honeypotField.value) {\n      // Optionally show a user-friendly error or silently fail for spam\n      return;\n    }\n    setSending(true);\n    emailjs.send(\n      'service_kua7hu3',\n      'template_wr7fpxc',\n      {\n        name,\n        email,\n        subject,\n        message,\n      },\n      '-BdVWUzt4g0H07ZtM'\n    )\n      .then(() => {\n        setIsModalOpen(true);\n        setSending(false);\n      })\n      .catch(() => {\n        setSending(false);\n        setFormErrors((prev) => ({ ...prev, general: 'Failed to send message. Please try again later.' }));\n      });\n  };\n\n  const handleInputChange = (field: 'name' | 'email' | 'subject' | 'message', value: string) => {\n    if (field === 'name') setName(value);\n    if (field === 'email') setEmail(value);\n    if (field === 'subject') setSubject(value);\n    if (field === 'message') setMessage(value);\n    // Remove error for this field if value is now valid\n    const result = contactFormSchema.safeParse({\n      name: field === 'name' ? value : name,\n      email: field === 'email' ? value : email,\n      subject: field === 'subject' ? value : subject,\n      message: field === 'message' ? value : message,\n    });\n    if (result.success) {\n      setFormErrors((prev) => ({ ...prev, [field]: undefined }));\n    } else {\n      const errorForField = result.error.errors.find((err) => err.path[0] === field);\n      setFormErrors((prev) => ({ ...prev, [field]: errorForField ? errorForField.message : undefined }));\n    }\n  };\n\n  return (\n    <>\n      <PageMeta title=\"Contact | Random Gorsey\" description=\"Send a message to Random Gorsey.\" path=\"/contact\" />\n      {/* Background looping video (disabled if WebM unsupported) */}\n      {isWebMSupported() && (\n        <video\n          autoPlay\n          muted\n          loop\n          playsInline\n          style={{\n            position: 'fixed',\n            top: 0,\n            left: 0,\n            width: '100%',\n            height: '100%',\n            objectFit: 'cover',\n            zIndex: -1,\n          }}\n        >\n          <source src={require('../videos/contact_canvas.webm')} type=\"video/webm\" />\n        </video>\n      )}\n      <motion.div\n      className={styles['contact-container']}\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.4 }}\n    >\n      {loading && <Spinner />}\n      {sending && <Spinner />}\n      {!loading && !sending && (\n        <>\n          <h1>Contact</h1>\n          <div className={styles['contact-row']}>\n            <div>\n              <Input\n                type=\"text\"\n                value={name}\n                onChange={(e) => handleInputChange('name', e.target.value)}\n                placeholder=\"Your Name\"\n                label=\"Your Name\"\n                className={styles['contact-input']}\n                error={formErrors.name}\n              />\n            </div>\n            <div>\n              <Input\n                type=\"email\"\n                value={email}\n                onChange={(e) => handleInputChange('email', e.target.value)}\n                placeholder=\"@ Your Email\"\n                label=\"Email\"\n                className={styles['contact-input']}\n                error={formErrors.email}\n              />\n            </div>\n          </div>\n          <div className={styles['subject-row']}>\n          <Input\n            type=\"text\"\n            value={subject}\n            onChange={(e) => handleInputChange('subject', e.target.value)}\n            placeholder=\"Subject\"\n            label=\"Subject\"\n            className={styles['contact-input']}\n            error={formErrors.subject}\n          /></div>\n          <TextArea \n            value={message}\n            onChange={(e) => handleInputChange('message', e.target.value)}\n            placeholder=\"Write your message here...\"\n            label=\"Message\"\n            className={styles['contact-textarea']}\n            error={formErrors.message}\n          />\n          <input\n            type=\"text\"\n            name=\"honeypot\"\n            style={{ display: 'none' }}\n            value=\"\"\n            onChange={() => {}}\n          />\n          <ContactButton\n            variant=\"primary\"\n            onClick={handleSend}\n            icon={<PaperAirplaneIcon className={styles['contact-icon']} />}\n            className={styles['contact-button']}\n            ariaLabel=\"Send message\"\n          >\n            Send\n          </ContactButton>\n          {isModalOpen && (\n            <div className={styles['modal']}>\n              <p>Message sent successfully!</p>\n              <Button\n                onClick={() => {\n                  setIsModalOpen(false);\n                  // Reset form fields and errors after closing modal\n                  setName('');\n                  setEmail('');\n                  setSubject('');\n                  setMessage('');\n                  setFormErrors({});\n                }}\n                className={styles['modal-close-button']}\n              >\n                Close\n              </Button>\n            </div>\n          )}\n        </>\n      )}\n    </motion.div>\n    </>\n  );\n};\n\nexport default Contact;","export function isWebMSupported(): boolean {\n  if (typeof document === 'undefined') return false;\n  const video = document.createElement('video');\n  return video.canPlayType('video/webm') !== '';\n}\n","import React from 'react';\nimport { Helmet } from 'react-helmet-async';\n\ninterface PageMetaProps {\n  title: string;\n  description?: string;\n  path?: string;\n}\n\nconst PageMeta: React.FC<PageMetaProps> = ({ title, description, path }) => {\n  const url = typeof window !== 'undefined'\n    ? `${window.location.origin}${path || window.location.pathname}`\n    : `https://randomgorsey.com${path || ''}`;\n  return (\n    <Helmet>\n      <title>{title}</title>\n      {description && <meta name=\"description\" content={description} />}\n      <link rel=\"canonical\" href={url} />\n      <meta property=\"og:title\" content={title} />\n      {description && <meta property=\"og:description\" content={description} />}\n      <meta property=\"og:url\" content={url} />\n      <meta property=\"og:type\" content=\"website\" />\n    </Helmet>\n  );\n};\n\nexport default PageMeta;\n"],"names":["_ref","children","htmlFor","className","required","style","_jsxs","concat","styles","_jsx","type","value","onChange","onBlur","placeholder","label","error","id","inputId","replace","toLowerCase","undefined","inputElement","input","marginBottom","inputContainer","Label","color","ExclamationCircleIcon","width","height","marginRight","verticalAlign","display","role","fontSize","rows","cols","textAreaId","contactFormSchema","z","name","min","email","subject","optional","message","Contact","setMessage","useState","setName","setEmail","setSubject","isModalOpen","setIsModalOpen","loading","setLoading","React","sending","setSending","formErrors","setFormErrors","timer","setTimeout","clearTimeout","handleInputChange","field","result","safeParse","success","prev","_objectSpread","errorForField","errors","find","err","path","_Fragment","PageMeta","title","description","isWebMSupported","autoPlay","muted","loop","playsInline","position","top","left","objectFit","zIndex","src","require","motion","div","initial","opacity","y","animate","transition","duration","Spinner","Input","e","target","TextArea","ContactButton","variant","onClick","handleSend","forEach","honeypotField","document","querySelector","emailjs","then","catch","general","icon","PaperAirplaneIcon","ariaLabel","Button","createElement","canPlayType","url","window","location","origin","pathname","Helmet","content","rel","href","property"],"sourceRoot":""}